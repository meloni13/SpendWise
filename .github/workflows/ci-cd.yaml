name: CI/CD Pipeline for MERN Stack

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Install dependencies
      run: |
        cd frontend
        npm install
        cd ../backend
        npm install

    # - name: Run tests
    #   run: |
    #     cd frontend
    #     npm test
    #     cd ../backend
    #     npm test

  docker-build-and-push:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push frontend Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/mern-frontend:latest ./frontend
        docker push ${{ secrets.DOCKER_USERNAME }}/mern-frontend:latest

    - name: Build and push backend Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/mern-backend:latest ./backend
        docker push ${{ secrets.DOCKER_USERNAME }}/mern-backend:latest

  deploy:
    runs-on: ubuntu-latest
    needs: docker-build-and-push
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Kubernetes credentials
      run: |
        echo "$KUBECONFIG_CONTENT" > kubeconfig.yaml
        export KUBECONFIG=kubeconfig.yaml

    - name: Create MongoDB Secret
      run: |
        kubectl create secret generic mongodb-secret \
          --from-literal=mongodb-url="mongodb://${{ secrets.MONGO_USERNAME }}:${{ secrets.MONGO_PASSWORD }}@${{ secrets.MONGO_URL }}" \
          --dry-run=client -o yaml | kubectl apply -f -



    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f k8s/frontend-deployment.yaml
        kubectl apply -f k8s/backend-deployment.yaml
        kubectl apply -f k8s/frontend-service.yaml
        kubectl apply -f k8s/backend-service.yaml
